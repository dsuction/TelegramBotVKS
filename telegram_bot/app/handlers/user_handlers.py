import datetime

from aiogram import types, Dispatcher, Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from api_communucation.acount import update_user_info
from api_communucation.auth import register, login
from api_communucation.meetings import get_meetings, create_meetings
from telegram_bot.app.keyboards.user_keyboards import *
from telegram_bot.app.state.register import RegisterState
from telegram_bot.app.utils.text import text_data

router = Router()
flag_r = False
is_open_profile = False
flag_setting_calendar = False
flag_create_VKS = False
flag_filter = False
start_data = ''
end_data = ''
saved_login = 'not'
saved_password = 'not'
panel_VKS = []
new_id = ''
new_information = ''
data_profile_registration = []
state = []
filter_VKS = []
old_tab_panel_VKS = ''


def profile(user_login: str, user_password: str):
    data_profile = login(user_login, user_password)
    result = f"""
üåá –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä, {data_profile[0]['user']['lastName']} {data_profile[0]['user']['firstName']}!

<b>üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>
<b>id:</b> {data_profile[0]['user']['id']}
<b>–õ–æ–≥–∏–Ω:</b> {data_profile[0]['user']['login']}
<b>–ü–æ—á—Ç–∞:</b> {data_profile[0]['user']['email']}
<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> {data_profile[0]['user']['phone'] if data_profile[0]['user']['phone'] else '–ù/–¥'}
<b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è</b> {data_profile[0]['user']['birthday'] if data_profile[0]['user']['birthday'] else '–ù/–¥'}

‚úèÔ∏è –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
"""
    return result


"""___________________________________________________–ë–ê–ó–ê___________________________________________________________"""


@router.message(Command('start'))
async def command_start(message: types.Message) -> None:
    await message.answer(text_data['start'], reply_markup=main_keyboard())


@router.message(Command('help'))
async def command_help(message: types.Message) -> None:
    await message.answer(text_data['help'], reply_markup=help_keyboard())


@router.message(Command('menu'))
async def open_menu_command(message: types.Message) -> None:
    await message.answer(text_data['menu'], reply_markup=menu_keyboard())


@router.callback_query(F.data == 'menu')
async def open_menu_callback(callback: types.CallbackQuery) -> None:
    await callback.message.edit_text(text_data['menu'], reply_markup=menu_keyboard())


@router.callback_query(F.data == 'open_support')
async def send_support_information(callback: types.CallbackQuery) -> None:
    await callback.message.edit_text(text_data['information'])


@router.message(Command('profile'))
async def send_profile_command(message: types.Message) -> None:
    global is_open_profile
    try:
        is_open_profile = False
        if saved_login == 'not' or saved_password == 'not':
            is_open_profile = True
            await message.answer(text_data['authorization'], reply_markup=registration_keyboard())
        else:
            await message.answer(profile(saved_login, saved_password), reply_markup=profile_keyboard())
    except:
        await message.answer("–£–ø—Å, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –ø–æ–ª–æ–º–∫–∞ –≤ {command_profile} üòî\n"
                             "–ë—Ä–∏–≥–∞–¥–∞ —Ö–æ–º—è—á–∫–æ–≤ —É–∂–µ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –µ–µ –ø–æ—á–∏–Ω–∫–æ–π, –ø—Ä–∏–¥–µ—Ç—Å—è –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å")


@router.callback_query(F.data == 'exit_profile')
async def exit_profile(callback: types.CallbackQuery) -> None:
    global saved_login, saved_password
    saved_login, saved_password = 'not', 'not'
    await callback.message.edit_text("–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è", reply_markup=log_out_profile_keyboard())


@router.callback_query(F.data == 'open_profile')
async def send_profile_callback(callback: types.CallbackQuery) -> None:
    """
    –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∞–∫–∫–∞—É–Ω—Ç–∞ –µ—Å–ª–∏ –µ–≥–æ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –≤–≤–µ–¥–µ–Ω—ã –≤ –±–æ—Ç —Ä–∞–Ω–µ–µ, –∏–Ω–∞—á–µ –æ–Ω –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏—Ö —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param callback:
    :return: None
    """

    global is_open_profile
    try:
        is_open_profile = False
        if saved_login == 'not' or saved_password == 'not':
            is_open_profile = True
            await callback.message.edit_text(text_data['authorization'], reply_markup=registration_keyboard())
        else:
            await callback.message.edit_text(profile(saved_login, saved_password), reply_markup=profile_keyboard())
    except:
        await callback.message.answer("–£–ø—Å, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –ø–æ–ª–æ–º–∫–∞ –≤ {callback_open_profile} üòî\n"
                                      "–ë—Ä–∏–≥–∞–¥–∞ —Ö–æ–º—è—á–∫–æ–≤ —É–∂–µ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –µ–µ –ø–æ—á–∏–Ω–∫–æ–π, –ø—Ä–∏–¥–µ—Ç—Å—è –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å")


"""____________________________________________–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –í –°–ò–°–¢–ï–ú–ï______________________________________________"""


@router.callback_query(F.data == 'start_registration')
async def start_registration(callback: types.CallbackQuery, state: FSMContext) -> None:
    await callback.message.edit_text(
        '<b>1Ô∏è‚É£ –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?</b>\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≤–∫—Å –º–æ–≥–ª–∏ —É–∑–Ω–∞—Ç—å –≤–∞—Å')
    await state.set_state(RegisterState.regName)


async def register_name(message: Message, state: FSMContext):
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç {message.text}!\n'
                         '<b>2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω</b>\n–ó–∞–ø–æ–º–Ω–∏—Ç–µ –µ–≥–æ, –≤–µ–¥—å –æ–Ω –≤–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –µ—â–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
    await state.update_data(regname=message.text)
    await state.set_state(RegisterState.regLogin)


async def register_login(message: Message, state: FSMContext):
    await message.answer(f'–í–∞—à –ª–æ–≥–∏–Ω: {message.text}\n'
                         '<b>3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å</b>\n–ó–∞–ø–æ–º–Ω–∏—Ç–µ –µ–≥–æ, –≤–µ–¥—å –æ–Ω –≤–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –µ—â–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
    await state.update_data(reglogin=message.text)
    await state.set_state(RegisterState.regPassword)


async def register_password(message: Message, state: FSMContext):
    await message.answer(f'–í–∞—à –ø–∞—Ä–æ–ª—å: {message.text}\n'
                         '<b>4Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É</b>\n–ù–∞ –Ω–µ–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –í–ö–°\n'
                         '–í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—åüòâ')
    await state.update_data(regpassword=message.text)
    await state.set_state(RegisterState.regEmail)


async def register_email(message: Message, state: FSMContext):
    await message.answer(f'–í–∞—à–∞ –ø–æ—á—Ç–∞: {message.text}\n'
                         '<b>5Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>\n–í—ã –ø–æ—á—Ç–∏ —É —Ü–µ–ª–∏!')
    await state.update_data(regemail=message.text)
    await state.set_state(RegisterState.regPhone)


async def register_phone(message: Message, state: FSMContext):
    global data_profile_registration

    await message.answer(f'–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {message.text}')
    await state.update_data(regphone=message.text)

    reg_data = await state.get_data()
    reg_name, reg_surname = reg_data.get('regname').split()
    reg_login = reg_data.get('reglogin')
    reg_password = reg_data.get('regpassword')
    reg_email = reg_data.get('regemail')
    reg_phone = reg_data.get('regphone')
    data_profile_registration = [reg_name, reg_surname, reg_login, reg_password, reg_email, reg_phone]
    await state.clear()
    await message.answer(f"<b>‚úèÔ∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –≤–∞–º–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
                         f"<b>–ò–º—è:</b> {reg_name}\n"
                         f"<b>–§–∞–º–∏–ª–∏—è:</b> {reg_surname}\n"
                         f"<b>–õ–æ–≥–∏–Ω:</b> {reg_login}\n"
                         f"<b>–ü–∞—Ä–æ–ª—å:</b> <span class='tg-spoiler'>{reg_password}</span>\n"
                         f"<b>–ü–æ—á—Ç–∞:</b> {reg_email}\n"
                         f"<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {reg_phone}\n\n"
                         f"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è?",
                         reply_markup=save_changes_keyboard())


@router.callback_query(F.data == 'ok_registration')
async def ok_registration(callback: types.CallbackQuery) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ –í–ö–°, –∏—Å–ø–æ–ª—å–∑—É—è –≤–≤–µ–¥–µ–Ω–Ω—ã–µ —Ä–∞–Ω–µ–µ –¥–∞–Ω–Ω—ã–µ
    :param callback:
    :return: None
    """

    reg_name = data_profile_registration[0]
    reg_surname = data_profile_registration[1]
    reg_login = data_profile_registration[2]
    reg_password = data_profile_registration[3]
    reg_email = data_profile_registration[4]
    reg_phone = data_profile_registration[5]

    try:
        result = register(first_name=reg_name, last_name=reg_surname, login=reg_login, password=reg_password,
                          email=reg_email, phone=reg_phone)
        await callback.message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç /profile")
    except:
        await callback.message.answer("–£–ø—Å, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –ø–æ–ª–æ–º–∫–∞ –≤ {callback_ok_registration} üòî\n"
                                      "–ë—Ä–∏–≥–∞–¥–∞ —Ö–æ–º—è—á–∫–æ–≤ —É–∂–µ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –µ–µ –ø–æ—á–∏–Ω–∫–æ–π, –ø—Ä–∏–¥–µ—Ç—Å—è –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å")


@router.callback_query(F.data == 'no_registration')
async def no_registration(callback: types.CallbackQuery) -> None:
    await callback.message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞")


"""_________________________________________–ò–ó–ú–ï–ù–ï–ù–ò–ï_–î–ê–ù–ù–´–•_–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø____________________________________________"""


@router.callback_query(F.data == 'edit_profile')
async def edit_profile(callback: types.CallbackQuery) -> None:
    global flag_r
    flag_r = True
    await callback.message.edit_text(f"""
–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:
1. –ü–∞—Ä–æ–ª—å 
2. –ò–º—è
3. –§–∞–º–∏–ª–∏—è 
4. –û—Ç—á–µ—Å—Ç–≤–æ
5. –ü–æ—á—Ç–∞
6. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
7. –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [–Ω–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞]_[–Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ]
""")


"""__________________________________________________–†–ê–ë–û–¢–ê_–°_–í–ö–°____________________________________________________"""


@router.callback_query(F.data == 'open_working_with_VKS')
async def open_working_with_VKS(callback: types.CallbackQuery) -> None:
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—å —Ä–∞–±–æ—Ç—ã —Å –í–ö–°
    :param callback:
    :return: None
    """
    await callback.message.edit_text(text_data['open_working_with_VKS'], reply_markup=vks_table())


@router.callback_query(F.data == 'upcoming_events_1')
async def upcoming_events_1(callback: types.CallbackQuery) -> None:
    global old_tab_panel_VKS
    old_tab_panel_VKS = callback.data
    await filter_view_my_VKS(callback)


@router.callback_query(F.data == 'upcoming_events')
async def upcoming_events(callback: types.CallbackQuery) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –±–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è
    :param callback:
    :return:
    """
    global panel_VKS, is_open_profile, state

    is_open_profile = False
    if saved_login == 'not' or saved_password == 'not':
        is_open_profile = True
        await callback.message.answer(text_data['authorization'], reply_markup=registration_keyboard())

    else:
        print(saved_login, saved_password)

        name = None
        priority = None
        department = None
        organizer = None

        if len(state):
            state = ['booked', 'cancelled', 'started', 'ended']
        for i in filter_VKS:
            if i[0] == 'name':
                name = i[1]
            elif i[0] == 'priority':
                priority = int(i[1])
            elif i[0] == 'department':
                department = int(i[1])
            elif i[0] == 'organizer':
                organizer = i[1]

        result = get_meetings(saved_login, saved_password, datetime.datetime.now(),
                              datetime.datetime.now() + datetime.timedelta(days=3), state=state,
                              priority=priority, name=name, department_id=department)
        if result == 'error':
            await callback.message.answer('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â–µ —Ä–∞–∑')
        elif not result:
            await callback.message.answer('–ù–µ—Ç –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ–±—ã—Ç–∏–π')
        else:
            current_page = 0
            panel_VKS = result
            await displaying_panel_VKS(callback, current_page)


@router.callback_query(F.data == 'filter_VKS-1')
async def filter_VKS_1(callback: types.CallbackQuery) -> None:
    global data_profile_registration, state
    state.append('booked')


@router.callback_query(F.data == 'filter_VKS-2')
async def filter_VKS_2(callback: types.CallbackQuery) -> None:
    global data_profile_registration, state
    state.append('cancelled')


@router.callback_query(F.data == 'filter_VKS-3')
async def filter_VKS_3(callback: types.CallbackQuery) -> None:
    global data_profile_registration, state
    state.append('started')


@router.callback_query(F.data == 'filter_VKS-4')
async def filter_VKS_4(callback: types.CallbackQuery) -> None:
    global data_profile_registration, state
    state.append('ended')


@router.callback_query(F.data == 'filter_VKS-5')
async def filter_VKS_5(callback: types.CallbackQuery) -> None:
    global flag_filter, data_profile_registration
    flag_filter = True
    filter_VKS.append(['name'])
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –í–ö–°')


@router.callback_query(F.data == 'filter_VKS-6')
async def filter_VKS_6(callback: types.CallbackQuery) -> None:
    global flag_filter, data_profile_registration
    flag_filter = True
    filter_VKS.append(['priority'])
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç')


@router.callback_query(F.data == 'filter_VKS-7')
async def filter_VKS_7(callback: types.CallbackQuery) -> None:
    global flag_filter, data_profile_registration
    flag_filter = True
    filter_VKS.append(['department'])
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ id –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞')


@router.callback_query(F.data == 'filter_VKS-8')
async def filter_VKS_8(callback: types.CallbackQuery) -> None:
    global flag_filter, data_profile_registration
    flag_filter = True
    filter_VKS.append(['organizer'])
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é')


@router.callback_query(F.data == 'ok_filter_VKS')
async def ok_filter_VKS(callback: types.CallbackQuery):
    if old_tab_panel_VKS == 'upcoming_events_1':
        await upcoming_events(callback)
    elif old_tab_panel_VKS == 'view_my_VKS_1':
        await view_my_VKS(callback)
    elif old_tab_panel_VKS == 'open_available_VKS_1':
        await open_available_VKS(callback)


async def filter_view_my_VKS(callback: types.CallbackQuery) -> None:
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞', reply_markup=filter_VKS_keyboard())


@router.callback_query(F.data == 'no_filter_VKS')
async def no_filter_VKS(callback: types.CallbackQuery) -> None:
    if old_tab_panel_VKS == 'upcoming_events_1':
        await upcoming_events(callback)
    elif old_tab_panel_VKS == 'view_my_VKS_1':
        await view_my_VKS(callback)
    elif old_tab_panel_VKS == 'open_available_VKS_1':
        await open_available_VKS(callback)


@router.callback_query(F.data == 'view_my_VKS_1')
async def view_my_VKS_1(callback: types.CallbackQuery) -> None:
    global old_tab_panel_VKS
    old_tab_panel_VKS = callback.data
    await filter_view_my_VKS(callback)


@router.callback_query(F.data == 'view_my_VKS')
async def view_my_VKS(callback: types.CallbackQuery) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Å–µ –í–ö–°, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –º—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã
    :param callback:
    :return:
    """

    global panel_VKS, is_open_profile, state

    is_open_profile = False
    if saved_login == 'not' or saved_password == 'not':
        is_open_profile = True
        await callback.message.answer(text_data['authorization'], reply_markup=registration_keyboard())

    else:
        name = None
        priority = None
        department = None
        organizer = None
        if len(state):
            state = ['booked', 'cancelled', 'started', 'ended']
        print(filter_VKS)
        for i in filter_VKS:
            if i[0] == 'name':
                name = i[1]
            elif i[0] == 'priority':
                priority = int(i[1])
            elif i[0] == 'department':
                department = int(i[1])
            elif i[0] == 'organizer':
                organizer = i[1]

        result = get_meetings(saved_login, saved_password, datetime.datetime.now() - datetime.timedelta(days=14),
                              datetime.datetime.now() + datetime.timedelta(days=14), user_id=True, state=state,
                              priority=priority, name=name, department_id=department)

        if result == 'error':
            await callback.message.answer('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â–µ —Ä–∞–∑')
        elif not result:
            await callback.message.answer('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∏ –≤ –æ–¥–Ω–æ–π –í–ö–°')
        else:
            current_page = 0
            panel_VKS = result
            await displaying_panel_VKS(callback, current_page)


@router.callback_query(F.data == 'open_available_VKS_1')
async def open_available_VKS_1(callback: types.CallbackQuery) -> None:
    global old_tab_panel_VKS
    old_tab_panel_VKS = callback.data
    await filter_view_my_VKS(callback)

@router.callback_query(F.data == 'open_available_VKS')
async def open_available_VKS(callback: types.CallbackQuery) -> None:
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—É—é –∏ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –í–ö–° –≤ —Å–∏—Å—Ç–µ–º–µ
    :param callback:
    :return: None
    """
    global flag_setting_calendar, is_open_profile

    is_open_profile = False
    if saved_login == 'not' or saved_password == 'not':
        is_open_profile = True
        await callback.message.answer(text_data['authorization'], reply_markup=registration_keyboard())

    else:
        flag_setting_calendar = True
        await callback.message.edit_text("""
        üìÜ <b>–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –í–ö–° –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥</b>
        
        –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –∏ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ì–ì–ì–ì-–ú–ú-–î–î –ì–ì–ì–ì-–ú–ú-–î–î
        """)


async def setting_calendar(message) -> None:
    """
    –ü–æ—Å–ª–µ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–∞—Ç —É—Ç–æ—á–Ω—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    :param message: –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: None
    """

    global flag_setting_calendar, panel_VKS
    flag_setting_calendar = False
    await message.answer(f'–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥: c {start_data} –ø–æ {end_data}', reply_markup=confirm_date_selection_VKS())


@router.callback_query(F.data == 'ok_date_selection')
async def ok_date_selection(callback: types.CallbackQuery) -> None:
    """
    –ï—Å–ª–∏ –¥–∞—Ç—ã –≤–≤–µ–¥–µ–Ω—ã –≤–µ—Ä–Ω–æ, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –í–ö–°
    :param callback:
    :return:
    """
    global panel_VKS, state

    g1, m1, d1 = map(int, start_data.split('-'))
    g2, m2, d2 = map(int, end_data.split('-'))

    name = None
    priority = None
    department = None
    organizer = None

    if len(state):
        state = ['booked', 'cancelled', 'started', 'ended']
    for i in filter_VKS:
        if i[0] == 'name':
            name = i[1]
        elif i[0] == 'priority':
            priority = int(i[1])
        elif i[0] == 'department':
            department = int(i[1])
        elif i[0] == 'organizer':
            organizer = i[1]

    result = get_meetings(saved_login, saved_password, from_date_time=datetime.datetime(g1, m1, d1),
                          to_date_time=datetime.datetime(g2, m2, d2), state=state,
                          priority=priority, name=name, department_id=department)
    if result == 'error':
        await callback.message.answer('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â–µ —Ä–∞–∑')
    elif not result:
        await callback.message.answer('–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥')
    else:
        current_page = 0
        panel_VKS = result
        await displaying_panel_VKS(callback, current_page)


async def displaying_panel_VKS(callback: types.CallbackQuery, current_page: int) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–∞–Ω–µ–ª—å —Å –í–ö–°
    :param callback:
    :param current_page:
    :return:
    """
    if panel_VKS == 'error':
        await callback.message.edit_text('error')
    elif not panel_VKS:
        await callback.message.edit_text('–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥')
    else:
        data = panel_VKS[current_page]
        if current_page == 0:
            result = f"""
{current_page + 1}/{len(panel_VKS)}              

<b>–í–∞—à–∞ –≤—Å—Ç—Ä–µ—á–∞ id</b> {data['id']} - {data['name']}
<b>–ù–∞—á–∞–ª–æ:</b> {' '.join(data['startedAt'].split('.')[0].split('T'))}
<b>–ö–æ–Ω–µ—Ü:</b> {' '.join(data['endedAt'].split('.')[0].split('T'))}
<b>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {data['duration']} –º–∏–Ω.

üîó {data['permalink']}
"""
            await callback.message.edit_text(result, reply_markup=start_switching_panel_VKS(current_page))

        elif current_page == len(panel_VKS) - 1:
            result = f"""
{current_page + 1}/{len(panel_VKS)}                

<b>–í–∞—à–∞ –≤—Å—Ç—Ä–µ—á–∞ id</b> {data['id']} - {data['name']}
<b>–ù–∞—á–∞–ª–æ:</b> {' '.join(data['startedAt'].split('.')[0].split('T'))}
<b>–ö–æ–Ω–µ—Ü:</b> {' '.join(data['endedAt'].split('.')[0].split('T'))}
<b>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {data['duration']} –º–∏–Ω.

üîó {data['permalink']}
"""
            await callback.message.edit_text(result, reply_markup=end_switching_panel_VKS(current_page))

        else:
            result = f"""
{current_page + 1}/{len(panel_VKS)}                

<b>–í–∞—à–∞ –≤—Å—Ç—Ä–µ—á–∞ id</b> {data['id']} - {data['name']}
<b>–ù–∞—á–∞–ª–æ:</b> {' '.join(data['startedAt'].split('.')[0].split('T'))}
<b>–ö–æ–Ω–µ—Ü:</b> {' '.join(data['endedAt'].split('.')[0].split('T'))}
<b>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {data['duration']} –º–∏–Ω.

üîó {data['permalink']}
"""
            await callback.message.edit_text(result, reply_markup=switching_panel_VKS(current_page))


@router.callback_query(F.data.startswith('switching_panel_VKS_right'))
async def switching_panel_VKS_right(callback: types.CallbackQuery) -> None:
    """
    –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤–∫–ª–∞–¥–∫—É –≤–ø—Ä–∞–≤–æ
    :param callback:
    :return:
    """
    current_page = int(callback.data.split('-')[1])
    await displaying_panel_VKS(callback, current_page + 1)


@router.callback_query(F.data.startswith('switching_panel_VKS_left'))
async def switching_panel_VKS_left(callback: types.CallbackQuery) -> None:
    """
    –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤–∫–ª–∞–¥–∫—É –≤–ª–µ–≤–æ
    :param callback:
    :return:
    """
    current_page = int(callback.data.split('-')[1])
    await displaying_panel_VKS(callback, current_page - 1)


@router.callback_query(F.data == 'create_VKS')
async def create_vks(callback: types.CallbackQuery) -> None:
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞–Ω–Ω—ã–µ, –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –í–ö–°
    :param callback:
    :return:
    """
    global flag_create_VKS

    flag_create_VKS = True
    await callback.message.answer(f"""
<b>üìÑ –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É –±—É–¥—É—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è</b>

<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b>

<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b>
<b>–ù–µ–æ–±—Ö–æ–¥–∏–º –º–∏–∫—Ä–æ—Ñ–æ–Ω?</b> (–¥–∞/–Ω–µ—Ç)
<b>–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∫–∞–º–µ—Ä–∞?</b> (–¥–∞/–Ω–µ—Ç)
<b>–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —á—Ç–æ —ç—Ç–æ?</b> (–¥–∞/–Ω–µ—Ç)

<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b>
<b>–ù–∞—á–∞–ª–æ –í–ö–°:</b>
<b>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b>

<b>–í–æ —Å–∫–æ–ª—å–∫–æ –≤–∞–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –≤—Å—Ç—Ä–µ—á–µ?</b>
""")


async def register_VKS(data: list, message) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –í–ö–°, –∏—Å–ø–æ–ª—å–∑—É—è —Ä–∞–Ω–µ–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    :param data: –í–≤–µ–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –í–ö–°
    :param message:
    :return:
    """
    global flag_create_VKS
    print(1)
    (name, isMicrophoneOn, isVideoOn, isWaitingRoomEnabled, participantsCount, startedAt, duration,
     sendNotificationsAt) = list(data)
    print(2)
    print(name, isMicrophoneOn, isVideoOn, isWaitingRoomEnabled, participantsCount, startedAt, duration,
          sendNotificationsAt)
    print(3)
    g1, m1, d1 = map(int, startedAt.split('-'))
    g2, m2, d2 = map(int, sendNotificationsAt.split('-'))
    print(4)
    token = login(login=saved_login, password=saved_password)[0]['token']
    print(5)
    print(create_meetings(name=name, is_microphone_on=bool(isMicrophoneOn), is_video_on=bool(isVideoOn),
                          is_waiting_room_enabled=bool(isWaitingRoomEnabled),
                          participants_count=int(participantsCount), started_at=datetime.datetime(g1, m1, d1),
                          duration=int(duration), send_notifications_at=datetime.datetime(g2, m2, d2),
                          state='booked', token=token))
    print(6)
    flag_create_VKS = False
    print(7)
    await message.answer("–í–ö–° —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")


@router.callback_query(F.data == 'yes_edit_profile')
async def yes_edit_profile(callback: types.CallbackQuery) -> None:
    global saved_password, flag_r
    if new_id == '1':
        update_user_info(saved_login, saved_password, password_new=new_information)
        saved_password = new_information
    elif new_id == '2':
        update_user_info(saved_login, saved_password, firs_name_new=new_information)
    elif new_id == '3':
        update_user_info(saved_login, saved_password, last_name_new=new_information)
    elif new_id == '4':
        update_user_info(saved_login, saved_password, middle_name_new=new_information)
    elif new_id == '5':
        update_user_info(saved_login, saved_password, email_new=new_information)
    elif new_id == '6':
        update_user_info(saved_login, saved_password, phone_new=new_information)
    elif new_id == '7':
        update_user_info(saved_login, saved_password, birthday_new=new_information)
    flag_r = False
    await callback.message.edit_text('–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å –ø—Ä–æ—Ñ–∏–ª—å?',
                                     reply_markup=is_revers_edit_profile())


@router.callback_query(F.data == 'no_edit_profile')
async def no_edit_profile(callback: types.CallbackQuery) -> None:
    await callback.message.edit_text('–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ')


@router.message(F.text)
async def click_for_more(message: Message) -> None:
    global saved_login, saved_password, new_id, new_information, start_data, end_data, flag_filter

    if message.text.lower() == '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
        await message.answer(text_data['information'])

    if flag_r:
        new_id, new_information = message.text.split('_')
        await message.answer(f"{text_data['edit'][new_id]}: {new_information}", reply_markup=is_edit_profile())

    else:
        if flag_setting_calendar:
            result = message.text.split()
            if len(result) == 2:
                start_data, end_data = result

                await setting_calendar(message)
            else:
                await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –∏ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ì–ì–ì–ì-–ú–ú-–î–î –ì–ì–ì–ì-–ú–ú-–î–î")

        elif is_open_profile:
            result = message.text.split()
            if len(result) == 2:
                saved_login, saved_password = result
                await send_profile_command(message)
            else:
                await message.answer("""
–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –≤ –¥–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:

<b>–õ–æ–≥–∏–Ω</b>
<b>–ü–∞—Ä–æ–ª—å</b>

–ò–ª–∏ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
""", reply_markup=registration_keyboard())

        elif flag_create_VKS:
            result = message.text.split()
            if len(result) == 8:
                await register_VKS(result, message)
            else:
                await message.answer("")

        elif flag_filter:
            result = message.text
            filter_VKS[-1].append(message.text)
            flag_filter = False

        else:
            await message.answer("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—Å :(\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é –∏—Å–ø–æ–ª—å–∑—É—è /help")


def register_user_handlers(dp: Dispatcher) -> None:
    dp.include_router(router)
