from datetime import datetime

from aiogram import types, Dispatcher, Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from api_communucation.auth import register, login
from api_communucation.meetings import get_meetings
from telegram_bot.app.keyboards.user_keyboards import *
from telegram_bot.app.state.register import RegisterState
from telegram_bot.app.utils.text import text_data

router = Router()

login_L = 'not'
password = 'not'
data_registr = []


def profile(login_L: str, password: str):
    data_profile = login(login_L, password)
    result = f"""
üåá –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä, {data_profile[0]['user']['lastName']} {data_profile[0]['user']['firstName']}!

<b>üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>
<b>id:</b> {data_profile[0]['user']['id']}
<b>–õ–æ–≥–∏–Ω:</b> {data_profile[0]['user']['login']}
<b>–ü–æ—á—Ç–∞:</b> {data_profile[0]['user']['email']}
<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> {data_profile[0]['user']['phone']}
<b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è</b> {data_profile[0]['user']['birthday']}

‚úèÔ∏è –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
"""
    return result


@router.message(Command('start'))
async def command_start(message: types.Message) -> None:
    await message.answer(text_data['start'], reply_markup=main_keyboard())


@router.message(Command('help'))
async def command_start(message: types.Message) -> None:
    await message.answer(text_data['help'], reply_markup=help_keyboard())


@router.message(Command('menu'))
async def open_menu(message: types.Message) -> None:
    await message.answer(text_data['menu'], reply_markup=menu_keyboard())


@router.callback_query(F.data == 'menu')
async def open_menu(callback: types.CallbackQuery) -> None:
    await callback.message.edit_text(text_data['menu'], reply_markup=menu_keyboard())


@router.message(Command('profile'))
async def send_profile_command(message: types.Message) -> None:
    global login_L, password
    if login_L == 'not' or password == 'not':
        await message.answer(text_data['authorization'], reply_markup=registration_keyboard())
    else:
        await message.answer(profile(login_L, password), reply_markup=profile_keyboard())


@router.callback_query(F.data == 'exit_profile')
async def exit_profile(callback: types.CallbackQuery) -> None:
    global login_L, password
    login_L, password = 'not', 'not'
    await callback.message.edit_text("–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è", reply_markup=log_out_profile_keyboard())


@router.callback_query(F.data == 'open_profile')
async def send_profile_callback(callback: types.CallbackQuery) -> None:
    global login_L, password
    if login_L == 'not' or password == 'not':
        await callback.message.edit_text(text_data['authorization'], reply_markup=registration_keyboard())
    else:
        await callback.message.edit_text(profile(login_L, password), reply_markup=profile_keyboard())


"""____________________________________________–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –í –°–ò–°–¢–ï–ú–ï______________________________________________"""


@router.callback_query(F.data == 'start_registration')
async def start_registration(callback: types.CallbackQuery, state: FSMContext) -> None:
    await callback.message.edit_text('<b>1Ô∏è‚É£ –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?</b>\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≤–∫—Å –º–æ–≥–ª–∏ —É–∑–Ω–∞—Ç—å –≤–∞—Å')
    await state.set_state(RegisterState.regName)


async def register_name(message: Message, state: FSMContext):
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç {message.text}!\n'
                         f'<b>2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω</b>\n–ó–∞–ø–æ–º–Ω–∏—Ç–µ –µ–≥–æ, –≤–µ–¥—å –æ–Ω –≤–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –µ—â–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
    await state.update_data(regname=message.text)
    await state.set_state(RegisterState.regLogin)


async def register_login(message: Message, state: FSMContext):
    await message.answer(f'–í–∞—à –ª–æ–≥–∏–Ω: {message.text}\n'
                         f'<b>3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å</b>\n–ó–∞–ø–æ–º–Ω–∏—Ç–µ –µ–≥–æ, –≤–µ–¥—å –æ–Ω –≤–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –µ—â–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
    await state.update_data(reglogin=message.text)
    await state.set_state(RegisterState.regPassword)


async def register_password(message: Message, state: FSMContext):
    await message.answer(f'–í–∞—à –ø–∞—Ä–æ–ª—å: {message.text}\n'
                         f'<b>4Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É</b>\n–ù–∞ –Ω–µ–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –±—É–¥—É—â–∏—Ö –≤–∫—Å\n–í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—åüòâ')
    await state.update_data(regpassword=message.text)
    await state.set_state(RegisterState.regEmail)


async def register_email(message: Message, state: FSMContext):
    await message.answer(f'–í–∞—à–∞ –ø–æ—á—Ç–∞: {message.text}\n'
                         f'<b>5Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>\n–í—ã –ø–æ—á—Ç–∏ —É —Ü–µ–ª–∏!')
    await state.update_data(regemail=message.text)
    await state.set_state(RegisterState.regPhone)


async def register_phone(message: Message, state: FSMContext):
    global data_registr
    await state.update_data(regphone=message.text)
    msg = f'–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {message.text}'
    await message.answer(msg)

    reg_data = await state.get_data()
    reg_name = reg_data.get('regname')
    reg_surname = "–ú–∏—Ö–∞–π–ª–æ–≤"
    reg_login = reg_data.get('reglogin')
    reg_password = reg_data.get('regpassword')
    reg_email = reg_data.get('regemail')
    reg_phone = reg_data.get('regphone')
    data_registr = [reg_name, reg_surname, reg_login, reg_password, reg_email, reg_phone]
    await state.clear()
    await message.answer(f"<b>‚úèÔ∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –≤–∞–º–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
                         f"<b>–ò–º—è:</b> {reg_name}\n"
                         f"<b>–§–∞–º–∏–ª–∏—è:</b> {reg_surname}\n"
                         f"<b>–õ–æ–≥–∏–Ω:</b> {reg_login}\n"
                         f"<b>–ü–∞—Ä–æ–ª—å:</b> <span class='tg-spoiler'>{reg_password}</span>\n"
                         f"<b>–ü–æ—á—Ç–∞:</b> {reg_email}\n"
                         f"<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {reg_phone}\n\n"
                         f"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è?",
                         reply_markup=save_changes_keyboard())


@router.callback_query(F.data == 'ok_registration')
async def ok_registration(callback: types.CallbackQuery) -> None:
    reg_name = data_registr[0]
    reg_surname = data_registr[1]
    reg_login = data_registr[2]
    reg_password = data_registr[3]
    reg_email = data_registr[4]
    reg_phone = data_registr[5]

    try:
        result = register(first_name=reg_name, last_name=reg_surname, login=reg_login, password=reg_password,
                          email=reg_email, phone=reg_phone)
        print(result)
        await callback.message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç /profile")
    except:
        await callback.message.answer("–£–ø—Å, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –ø–æ–ª–æ–º–∫–∞üòî\n"
                                      "–ë—Ä–∏–≥–∞–¥–∞ —Ö–æ–º—è—á–∫–æ–≤ —É–∂–µ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –µ–µ –ø–æ—á–∏–Ω–∫–æ–π, –ø—Ä–∏–¥–µ—Ç—Å—è –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å")


"""__________________________________________________________________________________________________________________"""


@router.callback_query(F.data == 'no_registration')
async def no_registration(callback: types.CallbackQuery) -> None:
    await callback.message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞")


@router.callback_query(F.data == 'edit_profile')
async def edit_profile(callback: types.CallbackQuery) -> None:
    ...


@router.callback_query(F.data == 'open_working_with_VKS')
async def open_working_with_VKS(callback: types.CallbackQuery) -> None:
    await callback.message.edit_text(text_data['open_working_with_VKS'], reply_markup=vks_table())


@router.callback_query(F.data == 'open_available_VKS')
async def send_available_VKS(callback: types.CallbackQuery) -> None:
    global login_L, password
    if login_L == 'not' or password == 'not':
        await callback.message.edit_text(text_data['authorization'], reply_markup=registration_keyboard())
    else:
        token = login(login_L, password)[0]['token']
        print(token)
        result = get_meetings(token, datetime(2024, 11, 26), datetime(2024, 11, 27))
        for i in result[0]['data']:
            result = f"""
<b>–í–∞—à–∞ –≤—Å—Ç—Ä–µ—á–∞ id</b> {i['id']} - {i['name']}
<b>–ù–∞—á–∞–ª–æ:</b> {' '.join(i['startedAt'].split('T'))}
<b>–ö–æ–Ω–µ—Ü:</b> {' '.join(i['endedAt'].split('T'))}
<b>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {i['duration']} –º–∏–Ω.
            
üîó {i['permalink']}
            """
            await callback.message.answer(result)


@router.callback_query(F.data == 'view_my_VKS')
async def view_my_VKS(callback: types.CallbackQuery) -> None:
    await callback.message.edit_text('pass2', reply_markup=setting_vks())


@router.callback_query(F.data == 'open_support')
async def send_support_information(callback: types.CallbackQuery) -> None:
    await callback.message.edit_text(text_data['information'])


@router.message(F.text)
async def click_for_more(message: Message) -> None:
    global login_L, password

    if message.text.lower() == '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
        await message.answer(text_data['information'])
    else:
        try:
            login_L, password = message.text.split()
            await send_profile_command(message)
        except:
            login_L, password = 'not', 'not'
            await message.answer("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—Å :(\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é –∏—Å–ø–æ–ª—å–∑—É—è /help")


def register_user_handlers(dp: Dispatcher) -> None:
    dp.include_router(router)
